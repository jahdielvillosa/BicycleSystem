/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bicyclesystem;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
//sound
import java.io.File;
import java.io.IOException;
import static java.lang.Integer.parseInt;
import java.text.SimpleDateFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.FloatControl;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.SwingUtilities;
/**
 *
 * @author Villosa
 */
public class Search extends javax.swing.JFrame {

    /**
     * Creates new form Dashboard
     */
    
    private BikeData adminData = new BikeData();
    DefaultTableModel model;
    
    private int table1Row      = 0;
    private int allentries1Row = 0;
    private int width          = 0;
    private int height         = 0;
    
    public Search() {
        initComponents();
        adminData.getBicycleStatus_Update();    
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        width  = (int) screenSize.getWidth();
        height = (int) screenSize.getHeight();
        this.setSize(width-175, height-65);
        getNumberRows2();
        table_AllBicycleEntries();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        TableLable1 = new javax.swing.JLabel();
        TableLable2 = new javax.swing.JLabel();
        startDatePicker = new org.jdesktop.swingx.JXDatePicker();
        endDatePicker = new org.jdesktop.swingx.JXDatePicker();
        searchButton = new javax.swing.JButton();
        TableLable = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel7 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        AvailableBikeBtn = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        AllEntriesBtn = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        RentedBtn = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        RepairBtn = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        BikeStatusBtn = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        usersBtn1 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(176, 68));
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(230, 230, 230));
        jPanel1.setMaximumSize(new java.awt.Dimension(873, 826));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "BicycleID", "BicycleName", "Station_Rented", "Time Rented", "Station_Rented", "Time Rented", "Status", "User", "Duration"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setToolTipText("");
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.setRowHeight(30);
        jTable1.setSurrendersFocusOnKeystroke(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(6).setResizable(false);
            jTable1.getColumnModel().getColumn(7).setResizable(false);
            jTable1.getColumnModel().getColumn(8).setResizable(false);
        }
        jTable1.getTableHeader().setDefaultRenderer(new DefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {

                JLabel l = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                //l.setBorder(new LineBorder(Color.black, 1));
                l.setBackground(Color.gray);

                // setFont(new Font("Consolas", Font.BOLD, 14));
                setForeground(Color.WHITE);
                return l;
            }
        });

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel1.setText("Search: ");

        TableLable1.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        TableLable1.setForeground(new java.awt.Color(102, 102, 102));
        TableLable1.setText("End date:");

        TableLable2.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        TableLable2.setForeground(new java.awt.Color(102, 102, 102));
        TableLable2.setText("Start date: ");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(TableLable2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102)
                .addComponent(TableLable1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 287, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(searchButton)
                .addGap(75, 75, 75))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(searchButton))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(TableLable2)
                                .addComponent(startDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(TableLable1)
                                .addComponent(endDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
        );

        TableLable.setFont(new java.awt.Font("Century Gothic", 1, 21)); // NOI18N
        TableLable.setForeground(new java.awt.Color(102, 102, 102));
        TableLable.setText("Bicycle status");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(TableLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1)
                .addGap(19, 19, 19))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TableLable)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(5, 5, 5)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(1, 65, 65));

        jPanel13.setBackground(new java.awt.Color(19, 123, 123));

        jLabel12.setFont(new java.awt.Font("Neou", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Search ACtions");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel12)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel12)
                .addGap(2, 2, 2))
        );

        AvailableBikeBtn.setBackground(new java.awt.Color(1, 65, 65));
        AvailableBikeBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AvailableBikeBtn.setPreferredSize(new java.awt.Dimension(180, 138));
        AvailableBikeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AvailableBikeBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                AvailableBikeBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                AvailableBikeBtnMouseExited(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Available ");

        jLabel11.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Bicycles");

        javax.swing.GroupLayout AvailableBikeBtnLayout = new javax.swing.GroupLayout(AvailableBikeBtn);
        AvailableBikeBtn.setLayout(AvailableBikeBtnLayout);
        AvailableBikeBtnLayout.setHorizontalGroup(
            AvailableBikeBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(AvailableBikeBtnLayout.createSequentialGroup()
                .addContainerGap(82, Short.MAX_VALUE)
                .addGroup(AvailableBikeBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(AvailableBikeBtnLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel11)))
                .addContainerGap())
        );
        AvailableBikeBtnLayout.setVerticalGroup(
            AvailableBikeBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AvailableBikeBtnLayout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addContainerGap())
        );

        AllEntriesBtn.setBackground(new java.awt.Color(26, 179, 148));
        AllEntriesBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AllEntriesBtn.setPreferredSize(new java.awt.Dimension(180, 45));
        AllEntriesBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AllEntriesBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                AllEntriesBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                AllEntriesBtnMouseExited(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("ALL ENTRIES");

        javax.swing.GroupLayout AllEntriesBtnLayout = new javax.swing.GroupLayout(AllEntriesBtn);
        AllEntriesBtn.setLayout(AllEntriesBtnLayout);
        AllEntriesBtnLayout.setHorizontalGroup(
            AllEntriesBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AllEntriesBtnLayout.createSequentialGroup()
                .addContainerGap(73, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addContainerGap())
        );
        AllEntriesBtnLayout.setVerticalGroup(
            AllEntriesBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AllEntriesBtnLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addContainerGap())
        );

        RentedBtn.setBackground(new java.awt.Color(1, 65, 65));
        RentedBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RentedBtn.setPreferredSize(new java.awt.Dimension(180, 45));
        RentedBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RentedBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                RentedBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                RentedBtnMouseExited(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Rented");

        javax.swing.GroupLayout RentedBtnLayout = new javax.swing.GroupLayout(RentedBtn);
        RentedBtn.setLayout(RentedBtnLayout);
        RentedBtnLayout.setHorizontalGroup(
            RentedBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RentedBtnLayout.createSequentialGroup()
                .addContainerGap(108, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addContainerGap())
        );
        RentedBtnLayout.setVerticalGroup(
            RentedBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RentedBtnLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addContainerGap())
        );

        RepairBtn.setBackground(new java.awt.Color(1, 65, 65));
        RepairBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RepairBtn.setPreferredSize(new java.awt.Dimension(180, 45));
        RepairBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RepairBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                RepairBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                RepairBtnMouseExited(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("For Repair");

        javax.swing.GroupLayout RepairBtnLayout = new javax.swing.GroupLayout(RepairBtn);
        RepairBtn.setLayout(RepairBtnLayout);
        RepairBtnLayout.setHorizontalGroup(
            RepairBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RepairBtnLayout.createSequentialGroup()
                .addContainerGap(82, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addContainerGap())
        );
        RepairBtnLayout.setVerticalGroup(
            RepairBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RepairBtnLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addContainerGap())
        );

        BikeStatusBtn.setBackground(new java.awt.Color(1, 65, 65));
        BikeStatusBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BikeStatusBtn.setPreferredSize(new java.awt.Dimension(180, 138));
        BikeStatusBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BikeStatusBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BikeStatusBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BikeStatusBtnMouseExited(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Bicycle status");

        javax.swing.GroupLayout BikeStatusBtnLayout = new javax.swing.GroupLayout(BikeStatusBtn);
        BikeStatusBtn.setLayout(BikeStatusBtnLayout);
        BikeStatusBtnLayout.setHorizontalGroup(
            BikeStatusBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BikeStatusBtnLayout.createSequentialGroup()
                .addContainerGap(52, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addContainerGap())
        );
        BikeStatusBtnLayout.setVerticalGroup(
            BikeStatusBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BikeStatusBtnLayout.createSequentialGroup()
                .addContainerGap(104, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addContainerGap())
        );

        usersBtn1.setBackground(new java.awt.Color(1, 65, 65));
        usersBtn1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        usersBtn1.setPreferredSize(new java.awt.Dimension(170, 127));
        usersBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usersBtn1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                usersBtn1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                usersBtn1MouseExited(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("All Users");

        javax.swing.GroupLayout usersBtn1Layout = new javax.swing.GroupLayout(usersBtn1);
        usersBtn1.setLayout(usersBtn1Layout);
        usersBtn1Layout.setHorizontalGroup(
            usersBtn1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, usersBtn1Layout.createSequentialGroup()
                .addContainerGap(88, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addContainerGap())
        );
        usersBtn1Layout.setVerticalGroup(
            usersBtn1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, usersBtn1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(AllEntriesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(AvailableBikeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(RentedBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(RepairBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(BikeStatusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(usersBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(176, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AvailableBikeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AllEntriesBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(RentedBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(RepairBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(BikeStatusBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(usersBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)))
        );

        jPanel9.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(4, 4, 4))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AllEntriesBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AllEntriesBtnMouseClicked
        // TODO add your handling code here:
        table_AllBicycleEntries();
        try {
            play_Hover();
        } catch (Exception ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_AllEntriesBtnMouseClicked

    private void AvailableBikeBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AvailableBikeBtnMouseClicked
        // TODO add your handling code here:
        table_AvailableBicycles();
        try {
            play_Hover();
        } catch (Exception ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AvailableBikeBtnMouseClicked

    private void RentedBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RentedBtnMouseClicked
        // TODO add your handling code here:
        table_RentedBicycles();
        play_Hover();
    }//GEN-LAST:event_RentedBtnMouseClicked

    private void RepairBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RepairBtnMouseClicked
        // TODO add your handling code here:
        table_RepairBicycles();
        play_Hover();
    }//GEN-LAST:event_RepairBtnMouseClicked

    private void BikeStatusBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BikeStatusBtnMouseClicked
        // TODO add your handling code here:
        table_station_status();
        play_Hover();
    }//GEN-LAST:event_BikeStatusBtnMouseClicked

    private void AllEntriesBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AllEntriesBtnMouseEntered
        // TODO add your handling code here:
        play_Hover1();
        AllEntriesBtn.setBackground(new Color(26,179,148)); //light lime (green)
    }//GEN-LAST:event_AllEntriesBtnMouseEntered

    private void AvailableBikeBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AvailableBikeBtnMouseEntered
        // TODO add your handling code here:
        play_Hover1();
        AvailableBikeBtn.setBackground(new Color(26,179,148)); //light lime (green)
    }//GEN-LAST:event_AvailableBikeBtnMouseEntered

    private void RentedBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RentedBtnMouseEntered
        // TODO add your handling code here:
        play_Hover1();
        RentedBtn.setBackground(new Color(26,179,148)); //light lime (green)
    }//GEN-LAST:event_RentedBtnMouseEntered

    private void RepairBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RepairBtnMouseEntered
        // TODO add your handling code here:
        play_Hover1();
        RepairBtn.setBackground(new Color(26,179,148)); //light lime (green)
    }//GEN-LAST:event_RepairBtnMouseEntered

    private void BikeStatusBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BikeStatusBtnMouseEntered
        // TODO add your handling code here:
        play_Hover1();
        BikeStatusBtn.setBackground(new Color(26,179,148)); //light lime (green)
    }//GEN-LAST:event_BikeStatusBtnMouseEntered

    private void AllEntriesBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AllEntriesBtnMouseExited
        // TODO add your handling code here:
        AllEntriesBtn.setBackground(new Color(1,65,65)); //blue
    }//GEN-LAST:event_AllEntriesBtnMouseExited

    private void AvailableBikeBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AvailableBikeBtnMouseExited
        // TODO add your handling code here:
        AvailableBikeBtn.setBackground(new Color(1,65,65)); //blue
    }//GEN-LAST:event_AvailableBikeBtnMouseExited

    private void RentedBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RentedBtnMouseExited
        // TODO add your handling code here:
        RentedBtn.setBackground(new Color(1,65,65)); //blue
    }//GEN-LAST:event_RentedBtnMouseExited

    private void RepairBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RepairBtnMouseExited
        // TODO add your handling code here:
        RepairBtn.setBackground(new Color(1,65,65)); //blue
    }//GEN-LAST:event_RepairBtnMouseExited

    private void BikeStatusBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BikeStatusBtnMouseExited
        // TODO add your handling code here:
        BikeStatusBtn.setBackground(new Color(1,65,65)); //blue
    }//GEN-LAST:event_BikeStatusBtnMouseExited

    private void usersBtn1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usersBtn1MouseClicked
        // TODO add your handling code here:
        table_AllUsers();
        play_Hover();
    }//GEN-LAST:event_usersBtn1MouseClicked

    private void usersBtn1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usersBtn1MouseEntered
        play_Hover1();
        usersBtn1.setBackground(new Color(26,179,148)); //light lime (green)
    }//GEN-LAST:event_usersBtn1MouseEntered

    private void usersBtn1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usersBtn1MouseExited
        // TODO add your handling code here:
        usersBtn1.setBackground(new Color(1,65,65)); //blue
    }//GEN-LAST:event_usersBtn1MouseExited

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        
        Date sdate = new Date();
        Date edate = new Date();
        sdate =  startDatePicker.getDate();
        edate =  endDatePicker.getDate();
        String startdate = new SimpleDateFormat("yyyy-MM-dd").format(sdate);
        String enddate   = new SimpleDateFormat("yyyy-MM-dd").format(edate);
        
        System.out.println("Start date: " +startdate);
        System.out.println("End   date: " +enddate);
    }//GEN-LAST:event_searchButtonActionPerformed

   //END OF DASHBOARD BUTTON
    
    
    /**
     */
    public void display() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            //  new Search().setVisible(true);
        });
        
    }
    
    public void table_AllBicycleEntries(){
        TableLable.setText("All Entries");
        int    c=0,r=0;
        String bikeName = null,station = null,status = null,time = null;
        int    bikeId   = 0,user = 0;
        String time2,station2;
        
        Vector<String> data= new Vector<String>();
        Date mydate = new Date();
 
        getNumberRows("bike_status"); //get number of rows
        
        //create a jtable model
        DefaultTableModel dm = new DefaultTableModel(0, 0);
        String title[]       = new String[]{"BicycleName", "Station", 
            "Time",  "Action", "User"};
        dm.setColumnIdentifiers(title);
        
        jTable1.setModel(dm);
        getNumberRows2();
        dm.setRowCount(allentries1Row);
        
        System.out.println("\n Search All Entries");
        
        try {
            ResultSet results = adminData.rs;
            Statement stmt    = adminData.stmt;
            results           = stmt.executeQuery("SELECT * FROM all_entries");
            
            while (results.next()){
                bikeId   = results.getInt("Bike_ID");
                bikeName = results.getString("BikeName");
                station  = results.getString("Station");
                time     = results.getString("Time");
                status   = results.getString("Status");
                user     = results.getInt("User");
                
                System.out.println("A - "+bikeId + " " + bikeName + " " + station + " "
                        + time + " " + user + " " + status);
 
                c=0;    //reset column
                jTable1.setValueAt(bikeName, r, c);
                c++;
                jTable1.setValueAt(station, r, c);
                c++;
                jTable1.setValueAt(time, r, c);
                c++;
                jTable1.setValueAt(status, r, c);
                c++;
                jTable1.setValueAt(user, r, c);
                c++;
                r++;
            }
        } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    public void table_AllUsers(){
        
        TableLable.setText("All Users");
        int    c=0,r=0;
        String userName = null,station = null,status = null,time = null;
        int    userID = 0,total_bike = 0,total_Payment = 0;
        
        Vector<String> data= new Vector<String>();
        Date mydate = new Date();
 
        getNumberRows("bike_status"); //get number of rows
        
        //create a jtable model
        DefaultTableModel dm = new DefaultTableModel(0, 0);
        String title[]       = new String[]{"UserID", "UserName", "Total Bike Borrowed", 
            "Total Payment", "Last activity"};
        dm.setColumnIdentifiers(title);
        
        jTable1.setModel(dm);
        dm.setRowCount(table1Row);
        
        System.out.println("\n All Users");
        
        try {
            //adminData.getBicycleStatus_Update();
            ResultSet results = adminData.rs;
            Statement stmt    = adminData.stmt;
           // table1Row = results.ge
            results           = stmt.executeQuery("SELECT * FROM users_registered");
            
            while (results.next()){
                userID        = results.getInt("userID");
                userName      = results.getString("UserName");
                total_bike    = parseInt(results.getString("Total_bike_borrowed"));
                total_Payment = parseInt(results.getString("Total_Payment"));
                time          = "none";
                
                System.out.println("user - "+userID + " " + userName + " " + total_bike + " "
                        + total_Payment + " " + time );
 
                 c=0;    //reset column
                jTable1.setValueAt(userID, r, c);
                c++;
                jTable1.setValueAt(userName, r, c);
                c++;
                jTable1.setValueAt(total_bike, r, c);
                c++;
                jTable1.setValueAt(total_Payment, r, c);
                c++;
                jTable1.setValueAt(time, r, c);
                c++;

                r++;
  

            }
        } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    
    public void table_AvailableBicycles(){

        TableLable.setText("Available Bicycles");
        int    c=0,r=0;
        String bikeName = null,station = null,status = null,time = null;
        int    bikeId = 0,user = 0,duration = 0;
        
        Vector<String> data= new Vector<String>();
        Date mydate = new Date();
 
        getNumberRows("bike_status"); //get number of rows
        
        //create a jtable model
        DefaultTableModel dm = new DefaultTableModel(0, 0);
        String title[]       = new String[]{"BicycleName", "Station", "Status"};
        dm.setColumnIdentifiers(title);
        
        jTable1.setModel(dm);
        dm.setRowCount(table1Row);
        
        System.out.println("\n Available Bicycles");
        
        try {
            ResultSet results = adminData.rs;
            Statement stmt    = adminData.stmt;
            results           = stmt.executeQuery("SELECT * FROM bike_status");
            
            while (results.next()){
                bikeId   = results.getInt("BikeID");
                bikeName = results.getString("BikeName");
                station  = results.getString("Station_Rented");
                status   = results.getString("Status");
                user     = results.getInt("User_ID");
                time     = results.getString("Time_Rented");
                duration = results.getInt("Duration");

                if( status.contentEquals("Available")){
                    
                    System.out.println("Available - "+bikeId + " " + bikeName + " " + station + " "
                        + status + " " + user + " " + time+ " " + duration);
                
                    c=0;    //reset column
                   jTable1.setValueAt(bikeName, r, c);
                   c++;
                   jTable1.setValueAt(station, r, c);
                   c++;
                   jTable1.setValueAt(status, r, c);
                   c++;

                   r++;
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    
    public void table_RentedBicycles(){
        
        TableLable.setText("All Rented Bicycles");
        int    c=0,r=0;
        String bikeName = null,station = null,status = null,time = null;
        int    bikeId   = 0,user = 0,duration = 0;
        
        Vector<String> data = new Vector<String>();
        Date mydate         = new Date();
 
        getNumberRows("bike_status"); //get number of rows
        
        //create a jtable model
        DefaultTableModel dm = new DefaultTableModel(0, 0);
        String title[]       = new String[]{"BicycleID2", "BicycleName", "Station_Rented", 
            "Time Rented", "Station Returned", "Time Returned", "Status", "User", "Duration"};
        dm.setColumnIdentifiers(title);
        
        jTable1.setModel(dm);
        dm.setRowCount(table1Row);
        
        System.out.println("\n All Rented Bicycles");
        
        try {
            ResultSet results = adminData.rs;
            Statement stmt    = adminData.stmt;
            results           = stmt.executeQuery("SELECT * FROM bike_status");
            
            while (results.next()){
                bikeId = results.getInt("BikeID");
                bikeName = results.getString("BikeName");
                station = results.getString("Station_Rented");
                status = results.getString("Status");
                user = results.getInt("User_ID");
                time = results.getString("Time_Rented");
                duration = results.getInt("Duration");
                
                
                if( status.contentEquals("Rented")){
                    System.out.println("Rented - "+bikeId + " " + bikeName + " " + station + " "
                        + status + " " + user + " " + time+ " " + duration);
                    
                    c=0;    //reset column
                   jTable1.setValueAt(bikeId, r, c);
                   c++;
                   jTable1.setValueAt(bikeName, r, c);
                   c++;
                   jTable1.setValueAt(station, r, c);
                   c++;
                   jTable1.setValueAt(time, r, c);
                   c++;
                   jTable1.setValueAt(station, r, c);
                   c++;
                   jTable1.setValueAt(time, r, c);
                   c++;
                   jTable1.setValueAt(status, r, c);
                   c++;
                   jTable1.setValueAt(user, r, c);
                   c++;
                   jTable1.setValueAt(duration, r, c);
                   c++;

                   r++;
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    
    public void table_RepairBicycles(){
        
        TableLable.setText("For Repair");
        int    c=0,r=0;
        String bikeName = null,station = null,status = null,time = null;
        int    bikeId = 0,user = 0,duration = 0;
        
        Vector<String> data = new Vector<String>();
 
        getNumberRows("bike_status"); //get number of rows
        
        //create a jtable model
        DefaultTableModel dm = new DefaultTableModel(0, 0);
        String title[] = new String[]{"BicycleID2", "BicycleName", "Station_Rented", 
            "Time Rented", "Station Returned", "Time Returned", "Status", "User", "Duration"};
        dm.setColumnIdentifiers(title);
        
        jTable1.setModel(dm);
        dm.setRowCount(table1Row);
        
        System.out.println("\n For Repair");
        
        try {
            ResultSet results = adminData.rs;
            Statement stmt    = adminData.stmt;
            results           = stmt.executeQuery("SELECT * FROM bike_status");
            
            while (results.next()){
                bikeId   = results.getInt("BikeID");
                bikeName = results.getString("BikeName");
                station  = results.getString("Station_Rented");
                status   = results.getString("Status");
                user     = results.getInt("User_ID");
                time     = results.getString("Time_Rented");
                duration = results.getInt("Duration");
                
                System.out.println("S - "+bikeId + " " + bikeName + " " + station + " "
                        + status + " " + user + " " + time+ " " + duration);
                if( status.contentEquals("Repair")){
                    c=0;    //reset column
                    jTable1.setValueAt(bikeId, r, c);
                    c++;
                    jTable1.setValueAt(bikeName, r, c);
                    c++;
                    jTable1.setValueAt(station, r, c);
                    c++;
                    jTable1.setValueAt(time, r, c);
                    c++;
                    jTable1.setValueAt(station, r, c);
                    c++;
                    jTable1.setValueAt(time, r, c);
                    c++;
                    jTable1.setValueAt(status, r, c);
                    c++;
                    jTable1.setValueAt(user, r, c);
                    c++;
                    jTable1.setValueAt(duration, r, c);
                    c++;

                    r++;
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    public void table_station_status(){
        
        TableLable.setText("Bicycle Status");
        //modify Jtable1 

        int    c=0,r=0;
        String bikeName = null,station = null,status = null,time = null;
        int    bikeId = 0,user = 0,duration = 0;
        
        Vector<String> data= new Vector<String>();
        Date mydate = new Date();
 
        getNumberRows("bike_status"); //get number of rows
        
        //create a jtable model
        DefaultTableModel dm = new DefaultTableModel(0, 0);
        String title[]       = new String[]{"BicycleID2", "BicycleName", "Station_Rented", 
            "Time Rented", "Station Returned", "Time Returned", "Status", "User", "Duration"};
        dm.setColumnIdentifiers(title);
        
        jTable1.setModel(dm);
        dm.setRowCount(table1Row);
        
        System.out.println("\n Bicycle Status");
        
        try {
            ResultSet results = adminData.rs;
            Statement stmt    = adminData.stmt;
            results           = stmt.executeQuery("SELECT * FROM bike_status");
            
            while (results.next()){
                bikeId   = results.getInt("BikeID");
                bikeName = results.getString("BikeName");
                station  = results.getString("Station_Rented");
                status   = results.getString("Status");
                user     = results.getInt("User_ID");
                time     = results.getString("Time_Rented");
                duration = results.getInt("Duration");
                
                System.out.println("S - "+bikeId + " " + bikeName + " " + station + " "
                        + status + " " + user + " " + time+ " " + duration);
 
                 c=0;    //reset column
                jTable1.setValueAt(bikeId, r, c);
                c++;
                jTable1.setValueAt(bikeName, r, c);
                c++;
                jTable1.setValueAt(station, r, c);
                c++;
                jTable1.setValueAt(time, r, c);
                c++;
                jTable1.setValueAt(station, r, c);
                c++;
                jTable1.setValueAt(time, r, c);
                c++;
                jTable1.setValueAt(status, r, c);
                c++;
                jTable1.setValueAt(user, r, c);
                c++;
                jTable1.setValueAt(duration, r, c);
                c++;

                r++;
  

            }
        } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    public void table_bike_repair(){
        //modify Jtable1 

        int    c=0,r=0;
        String bikeName = null,station = null,status = null,time = null;
        int    bikeId = 0,user = 0,duration = 0;
        
        Vector<String> data= new Vector<String>();
        Date mydate = new Date();
 
        getNumberRows("bike_status"); //get number of rows
        
        //create a jtable model
        DefaultTableModel dm = new DefaultTableModel(0, 0);
        String title[]       = new String[]{"BicycleID2", "BicycleName", "Station_Rented", 
            "Time Rented", "Station Returned", "Time Returned", "Status", "User", "Duration"};
        dm.setColumnIdentifiers(title);
        
        jTable1.setModel(dm);
        dm.setRowCount(table1Row);
        
        System.out.println("\n Bicycle Repair");
        
        try {
            ResultSet results = adminData.rs;
            Statement stmt    = adminData.stmt;
            results           = stmt.executeQuery("SELECT * FROM bike_status");
            
            while (results.next()){
                bikeId   = results.getInt("BikeID");
                bikeName = results.getString("BikeName");
                station  = results.getString("Station_Rented");
                status   = results.getString("Status");
                user     = results.getInt("User_ID");
                time     = results.getString("Time_Rented");
                duration = results.getInt("Duration");
                
                System.out.println("S - "+bikeId + " " + bikeName + " " + station + " "
                        + status + " " + user + " " + time+ " " + duration);
 
                c=0;    //reset column
                jTable1.setValueAt(bikeId, r, c);
                c++;
                jTable1.setValueAt(bikeName, r, c);
                c++;
                jTable1.setValueAt(station, r, c);
                c++;
                jTable1.setValueAt(time, r, c);
                c++;
                jTable1.setValueAt(station, r, c);
                c++;
                jTable1.setValueAt(time, r, c);
                c++;
                jTable1.setValueAt(status, r, c);
                c++;
                jTable1.setValueAt(user, r, c);
                c++;
                jTable1.setValueAt(duration, r, c);
                c++;

                r++;
  

            }
        } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    public void table_bike_status(){
        //modify Jtable1 
        
        int    c=0,r=0;
        String bikeName = null,station = null,status = null,time = null;
        int    bikeId = 0,user = 0,duration = 0;
        
        Vector<String> data = new Vector<String>();
        Date mydate         = new Date();
 
        getNumberRows("bike_status"); //get number of rows
        
        //create a jtable model
        DefaultTableModel dm = new DefaultTableModel(0, 0);
        String title[]       = new String[]{"BicycleID2", "BicycleName", "Station_Rented", 
            "Time Rented", "Station Returned", "Time Returned", "Status", "User", "Duration"};
        dm.setColumnIdentifiers(title);
        
        jTable1.setModel(dm);
        dm.setRowCount(table1Row);
        
        System.out.println("\n Search bike_status");
        
        try {
            ResultSet results = adminData.rs;
            Statement stmt    = adminData.stmt;
            results           = stmt.executeQuery("SELECT * FROM bike_status");
            
            while (results.next()){
                bikeId   = results.getInt("BikeID");
                bikeName = results.getString("BikeName");
                station  = results.getString("Station_Rented");
                status   = results.getString("Status");
                user     = results.getInt("User_ID");
                time     = results.getString("Time_Rented");
                duration = results.getInt("Duration");
                
                System.out.println("S - "+bikeId + " " + bikeName + " " + station + " "
                        + status + " " + user + " " + time+ " " + duration);
 
                c=0;    //reset column
                jTable1.setValueAt(bikeId, r, c);
                c++;
                jTable1.setValueAt(bikeName, r, c);
                c++;
                jTable1.setValueAt(station, r, c);
                c++;
                jTable1.setValueAt(time, r, c);
                c++;
                jTable1.setValueAt(station, r, c);
                c++;
                jTable1.setValueAt(time, r, c);
                c++;
                jTable1.setValueAt(status, r, c);
                c++;
                jTable1.setValueAt(user, r, c);
                c++;
                jTable1.setValueAt(duration, r, c);
                c++;

                r++;
  

            }
        } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void getBicycleUpdate(){
        //bicycle status variables
        int c=0,r=0;
        String bikeName = null,station = null,status = null,time = null;
        int bikeId = 0,user = 0,duration = 0, tablerow = table1Row;
        
        //initialize to get current dat
        Date mydate = new Date();
        getNumberRows("bike_status");// get the number of rows
        
        try {
            r = 0;
            ResultSet results = adminData.rs;
            Statement stmt    = adminData.stmt;
            results           = stmt.executeQuery("SELECT * FROM bike_status");
            
            while (results.next()){
                bikeId   = results.getInt("BikeID");
                bikeName = results.getString("BikeName");
                station  = results.getString("Station_Rented");
                status   = results.getString("Status");
                user     = results.getInt("User_ID");
                time     = results.getString("Time_Rented");
                duration = results.getInt("Duration");
                
                System.out.println(bikeId + " " + bikeName + " " + station + " "
                        + status + " " + user + " " + time+ " " + duration + " - " + mydate.toString());
                
            c=0;    //reset column
            jTable1.setValueAt(bikeName, r, c);
            c++;
            jTable1.setValueAt(station, r, c);
            c++;
            jTable1.setValueAt(status, r, c);
            c++;
            jTable1.setValueAt(user, r, c);
            c++;
            jTable1.setValueAt(time, r, c);
            c++;
            r++;
        }
            
        } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
        sortTable();
        getNumberRows("bike_status");
    }
    
   public void getNumberRows(String tableName){
        try{   
           ResultSet results = adminData.rs;
           Statement stmt    = adminData.stmt;
           results           = stmt.executeQuery("SELECT * FROM "+ tableName);
           
           if(results.last()){
              table1Row  = results.getRow();
           } else {
               table1Row = 0; 
           }
        } catch (Exception e){
           System.out.println("Error getting row count");
           e.printStackTrace();
        }
        
        System.out.println("Rows:" + table1Row);
    }
   
    public void getNumberRows2(){
        try{
           adminData.getBicycleStatus_Update();     
           ResultSet results = adminData.rs;
           Statement stmt    = adminData.stmt;
           results           = stmt.executeQuery("SELECT * FROM all_entries");
           
           if(results.last()){
               allentries1Row = results.getRow();
           } else {
               allentries1Row = 0; 
           }
        } catch (Exception e){
           System.out.println("Error getting row count");
           e.printStackTrace();
        }
        
        System.out.println("Rows2:" + allentries1Row);
    }
   
   
   public void sortTable(){
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTable1.getModel());
        jTable1.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys  = new ArrayList<>();

        int columnIndexToSort = 4;
        sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.DESCENDING));

        sorter.setSortKeys(sortKeys);
        sorter.sort();
   }
   
   public void play_Hover(){
         
       AudioInputStream audioInputStream = null;
        try {
            File in = new File("C:\\Users\\CHING25\\Documents\\IO System Software\\BicycleSystem\\src\\bicyclesystem\\blip1.wav");
            audioInputStream    = AudioSystem.getAudioInputStream(in);
            Clip play           = AudioSystem.getClip();
            play.open(audioInputStream);
            FloatControl volume = (FloatControl)play.getControl(FloatControl.Type.MASTER_GAIN);
            
            volume.setValue(1.0f); // Reduce volume by 10 decibels.
            play.start();
            
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    // A GUI element to prevent the Clip's daemon Thread
                    // from terminating at the end of the main()
                    //JOptionPane.showMessageDialog(null, "");
                }
            });
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                audioInputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
   }
   
   
   public void play_Hover1(){
         
       AudioInputStream audioInputStream = null;
        try {
            File in = new File("C:\\Users\\CHING25\\Documents\\IO System Software\\BicycleSystem\\src\\bicyclesystem\\mouse_over4.wav");
            audioInputStream    = AudioSystem.getAudioInputStream(in);
            Clip play           = AudioSystem.getClip();
            play.open(audioInputStream);
            FloatControl volume = (FloatControl)play.getControl(FloatControl.Type.MASTER_GAIN);
            
            volume.setValue(0.01f); // Reduce volume by 10 decibels.
            play.start();
            
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    // A GUI element to prevent the Clip's daemon Thread
                    // from terminating at the end of the main()
                    //JOptionPane.showMessageDialog(null, "");
                }
            });
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                audioInputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
   }
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AllEntriesBtn;
    private javax.swing.JPanel AvailableBikeBtn;
    private javax.swing.JPanel BikeStatusBtn;
    private javax.swing.JPanel RentedBtn;
    private javax.swing.JPanel RepairBtn;
    private javax.swing.JLabel TableLable;
    private javax.swing.JLabel TableLable1;
    private javax.swing.JLabel TableLable2;
    private javax.swing.ButtonGroup buttonGroup1;
    private org.jdesktop.swingx.JXDatePicker endDatePicker;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton searchButton;
    private org.jdesktop.swingx.JXDatePicker startDatePicker;
    private javax.swing.JPanel usersBtn1;
    // End of variables declaration//GEN-END:variables
}
